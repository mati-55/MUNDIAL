import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import json, os

# ==============================================================
# 🔹 Cargar datos del torneo desde JSON
# ==============================================================
def cargar_datos():
    if not os.path.exists("torneo_data.json"):
        messagebox.showerror("Error", "No se encontró el archivo torneo_data.json")
        return {}
    with open("torneo_data.json", "r", encoding="utf-8") as f:
        return json.load(f)

# ==============================================================
# 🔹 Clase principal de la app
# ==============================================================
class AppCopaSub20:
    def __init__(self, root):
        self.root = root
        self.root.title("Copa Mundial Sub-20 - Chile 2025")
        self.root.geometry("1200x700")
        self.root.config(bg="#0F172A")

        self.datos = cargar_datos()

        # =======================
        # Panel lateral (menú)
        # =======================
        self.panel = tk.Frame(self.root, bg="#1E293B", width=220)
        self.panel.pack(side="left", fill="y")

        titulo = tk.Label(self.panel, text="🏆 Copa Sub-20", bg="#1E293B",
                          fg="white", font=("Arial", 16, "bold"))
        titulo.pack(pady=25)

        botones = [
            ("📅 Partidos", self.mostrar_partidos),
            ("📊 Tabla", self.mostrar_tabla),
            ("🔗 Llaves", self.mostrar_llaves),
            ("📈 Estadísticas", self.mostrar_estadisticas),
            ("📝 Informes", self.mostrar_informes),
            ("⚙️ Configuración", self.mostrar_config)
        ]

        for texto, comando in botones:
            tk.Button(self.panel, text=texto, bg="#334155", fg="white",
                      font=("Arial", 12), relief="flat", cursor="hand2",
                      command=comando, width=18, height=2).pack(pady=5)

        # =======================
        # Área principal
        # =======================
        self.area_principal = tk.Frame(self.root, bg="#0F172A")
        self.area_principal.pack(side="right", expand=True, fill="both")

        self.mostrar_partidos()  # vista inicial

    # ==============================================================
    # 📅 Partidos
    # ==============================================================
    def mostrar_partidos(self):
        self._limpiar_area()
        tk.Label(self.area_principal, text="📅 Partidos del torneo",
                 bg="#0F172A", fg="white", font=("Arial", 20, "bold")).pack(pady=15)

        tree = ttk.Treeview(self.area_principal, columns=("Fecha", "Equipo 1", "Goles 1", "Goles 2", "Equipo 2"),
                            show="headings", height=20)
        for col in ("Fecha", "Equipo 1", "Goles 1", "Goles 2", "Equipo 2"):
            tree.heading(col, text=col)
            tree.column(col, width=150, anchor="center")
        tree.pack(pady=15)

        # Insertar datos
        for partido in self.datos.get("partidos", []):
            tree.insert("", "end", values=(
                partido["fecha"],
                partido["equipo1"],
                partido.get("goles1", "-"),
                partido.get("goles2", "-"),
                partido["equipo2"]
            ))

    # ==============================================================
    # 📊 Tabla de posiciones
    # ==============================================================
    def mostrar_tabla(self):
        self._limpiar_area()
        tk.Label(self.area_principal, text="📊 Tabla de Posiciones",
                 bg="#0F172A", fg="white", font=("Arial", 20, "bold")).pack(pady=15)

        tree = ttk.Treeview(self.area_principal,
                            columns=("Grupo", "Equipo", "PJ", "G", "E", "P", "GF", "GC", "Pts"),
                            show="headings", height=20)
        for col in ("Grupo", "Equipo", "PJ", "G", "E", "P", "GF", "GC", "Pts"):
            tree.heading(col, text=col)
            tree.column(col, width=90, anchor="center")
        tree.pack(pady=15)

        for fila in self.datos.get("tabla", []):
            tree.insert("", "end", values=(
                fila["grupo"], fila["equipo"], fila["pj"], fila["g"],
                fila["e"], fila["p"], fila["gf"], fila["gc"], fila["pts"]
            ))

    # ==============================================================
    # 🔗 Llaves del torneo (automáticas)
    # ==============================================================
    def mostrar_llaves(self):
        self._limpiar_area()
        tk.Label(self.area_principal, text="🔗 Llaves del Torneo",
                 bg="#0F172A", fg="white", font=("Arial", 20, "bold")).pack(pady=10)

        canvas = tk.Canvas(self.area_principal, bg="#0F172A", highlightthickness=0)
        canvas.pack(fill="both", expand=True)

        llaves = self._generar_llaves()

        x_pos = [80, 340, 600, 860]  # posiciones de columnas (octavos→final)
        y_start = 80
        box_w, box_h = 180, 40
        espacio_y = 80

        for ronda_i, ronda in enumerate(llaves):
            for i, (e1, e2) in enumerate(ronda):
                y = y_start + i * espacio_y * (2 ** ronda_i)
                canvas.create_rectangle(x_pos[ronda_i], y, x_pos[ronda_i] + box_w, y + box_h, fill="#1E293B")
                canvas.create_text(x_pos[ronda_i] + box_w/2, y + 12, text=e1, fill="white", font=("Arial", 10))
                canvas.create_rectangle(x_pos[ronda_i], y + 45, x_pos[ronda_i] + box_w, y + 45 + box_h, fill="#1E293B")
                canvas.create_text(x_pos[ronda_i] + box_w/2, y + 45 + 12, text=e2, fill="white", font=("Arial", 10))

    def _generar_llaves(self):
        """
        Genera automáticamente las llaves según los datos del torneo.
        Simplificado: toma los 2 primeros de cada grupo para formar octavos.
        """
        grupos = {}
        for fila in self.datos.get("tabla", []):
            g = fila["grupo"]
            if g not in grupos:
                grupos[g] = []
            grupos[g].append(fila)

        # Ordenar equipos de cada grupo
        for g in grupos:
            grupos[g].sort(key=lambda x: x["pts"], reverse=True)

        clasificados = []
        for g in grupos:
            clasificados.append(grupos[g][0]["equipo"])
            clasificados.append(grupos[g][1]["equipo"])

        # Cruces según patrón FIFA (ejemplo Sub-20)
        octavos = [
            (clasificados[0], clasificados[15]),
            (clasificados[7], clasificados[8]),
            (clasificados[3], clasificados[12]),
            (clasificados[4], clasificados[11]),
            (clasificados[1], clasificados[14]),
            (clasificados[6], clasificados[9]),
            (clasificados[2], clasificados[13]),
            (clasificados[5], clasificados[10])
        ]

        # Rondas vacías (de momento sin simulación)
        cuartos = [("Ganador O1", "Ganador O2"), ("Ganador O3", "Ganador O4"),
                   ("Ganador O5", "Ganador O6"), ("Ganador O7", "Ganador O8")]
        semis = [("Ganador C1", "Ganador C2"), ("Ganador C3", "Ganador C4")]
        final = [("Ganador S1", "Ganador S2")]

        return [octavos, cuartos, semis, final]

    # ==============================================================
    # 📈 Estadísticas
    # ==============================================================
    def mostrar_estadisticas(self):
        self._limpiar_area()
        tk.Label(self.area_principal, text="📈 Estadísticas del Torneo",
                 bg="#0F172A", fg="white", font=("Arial", 20, "bold")).pack(pady=20)
        tk.Label(self.area_principal, text="(En desarrollo... incluir goleadores, tarjetas, etc.)",
                 bg="#0F172A", fg="#CBD5E1", font=("Arial", 12)).pack(pady=10)

    # ==============================================================
    # 📝 Informes
    # ==============================================================
    def mostrar_informes(self):
        self._limpiar_area()
        tk.Label(self.area_principal, text="📝 Informes",
                 bg="#0F172A", fg="white", font=("Arial", 20, "bold")).pack(pady=20)
        tk.Label(self.area_principal, text="(En desarrollo... incluir reportes personalizados del torneo)",
                 bg="#0F172A", fg="#CBD5E1", font=("Arial", 12)).pack(pady=10)

    # ==============================================================
    # ⚙️ Configuración
    # ==============================================================
    def mostrar_config(self):
        self._limpiar_area()
        tk.Label(self.area_principal, text="⚙️ Configuración",
                 bg="#0F172A", fg="white", font=("Arial", 20, "bold")).pack(pady=20)
        tk.Label(self.area_principal, text="(Opciones de idioma, tema visual, etc.)",
                 bg="#0F172A", fg="#CBD5E1", font=("Arial", 12)).pack(pady=10)

    # ==============================================================
    # 🧹 Limpiar área principal
    # ==============================================================
    def _limpiar_area(self):
        for widget in self.area_principal.winfo_children():
            widget.destroy()


# ==============================================================
# 🚀 Ejecutar la app
# ==============================================================
if __name__ == "__main__":
    root = tk.Tk()
    AppCopaSub20(root)
    root.mainloop()
