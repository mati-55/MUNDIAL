import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import json
import os

# ==============================
# üîπ Cargar datos del torneo
# ==============================
def cargar_datos():
    with open("torneo_data.json", "r", encoding="utf-8") as f:
        return json.load(f)

# ==============================
# üîπ Clase principal de la app
# ==============================
class AppTorneo:
    def __init__(self, root):
        self.root = root
        self.root.title("Copa del Mundo Sub-20 | Chile 2025")
        self.root.geometry("950x620")
        self.root.configure(bg="#1b1b1b")

        # Datos del torneo
        self.datos = cargar_datos()

        # Fases del torneo (para el apartado de partidos)
        self.fases = ["Fase de Grupos", "Octavos de Final", "Cuartos de Final", "Semifinales", "Final"]

        # Crear interfaz
        self.crear_panel_lateral()
        self.crear_area_principal()

        # Mostrar por defecto el inicio
        self.mostrar_inicio()

    # -----------------------------
    # üîπ Panel lateral con secciones
    # -----------------------------
    def crear_panel_lateral(self):
        self.panel_lateral = tk.Frame(self.root, bg="#121212", width=220)
        self.panel_lateral.pack(side="left", fill="y")

        titulo = tk.Label(self.panel_lateral, text="‚öΩ Copa Sub-20", fg="white", bg="#121212",
                          font=("Segoe UI", 15, "bold"), pady=15)
        titulo.pack()

        botones = [
            ("üè† Inicio", self.mostrar_inicio),
            ("üèÜ Partidos", self.mostrar_fases),
            ("üìä Tabla de Posiciones", self.mostrar_tabla_posiciones),
            ("üìã Informes / Estad√≠sticas", self.mostrar_informes),
            ("‚öôÔ∏è Configuraci√≥n", self.mostrar_configuracion)
        ]

        for texto, comando in botones:
            boton = tk.Button(
                self.panel_lateral,
                text=texto,
                font=("Segoe UI", 11),
                bg="#1f1f1f",
                fg="white",
                activebackground="#2e2e2e",
                activeforeground="#00bfff",
                bd=0,
                padx=10,
                pady=10,
                anchor="w",
                command=comando
            )
            boton.pack(fill="x", pady=3)

    # -----------------------------
    # üîπ √Årea principal
    # -----------------------------
    def crear_area_principal(self):
        self.area_principal = tk.Frame(self.root, bg="#1b1b1b")
        self.area_principal.pack(side="right", fill="both", expand=True)

    def limpiar_area(self):
        for widget in self.area_principal.winfo_children():
            widget.destroy()

    # -----------------------------
    # üè† INICIO
    # -----------------------------
    def mostrar_inicio(self):
        self.limpiar_area()
        tk.Label(self.area_principal, text="Bienvenido a la Copa del Mundo Sub-20 (Chile 2025)",
                 bg="#1b1b1b", fg="white", font=("Segoe UI", 16, "bold")).pack(pady=25)

        tk.Label(self.area_principal, text="Visualiza los partidos, las fases, estad√≠sticas y la tabla de posiciones en un solo lugar.",
                 bg="#1b1b1b", fg="gray", font=("Segoe UI", 12), wraplength=600, justify="center").pack(pady=15)

        tk.Label(self.area_principal, text="Selecciona una secci√≥n del panel lateral para comenzar.",
                 bg="#1b1b1b", fg="#00bfff", font=("Segoe UI", 12, "italic")).pack(pady=20)

    # -----------------------------
    # üèÜ PARTIDOS (por fase)
    # -----------------------------
    def mostrar_fases(self):
        self.limpiar_area()

        titulo = tk.Label(self.area_principal, text="Partidos del Torneo",
                          bg="#1b1b1b", fg="white", font=("Segoe UI", 16, "bold"))
        titulo.pack(pady=15)

        frame_botones = tk.Frame(self.area_principal, bg="#1b1b1b")
        frame_botones.pack(pady=10)

        for fase in self.fases:
            btn = tk.Button(frame_botones, text=fase, font=("Segoe UI", 10),
                            bg="#2a2a2a", fg="white", activebackground="#00bfff",
                            activeforeground="white", bd=0, padx=10, pady=5,
                            command=lambda f=fase: self.mostrar_partidos(f))
            btn.pack(side="left", padx=6)

        self.frame_partidos = tk.Frame(self.area_principal, bg="#1b1b1b")
        self.frame_partidos.pack(fill="both", expand=True, pady=10)

    def mostrar_partidos(self, fase):
        for widget in self.frame_partidos.winfo_children():
            widget.destroy()

        partidos = [p for p in self.datos["calendario"].values() if p["fase"] == fase]

        if not partidos:
            tk.Label(self.frame_partidos, text="No hay partidos en esta fase.",
                     bg="#1b1b1b", fg="gray", font=("Segoe UI", 12)).pack(pady=20)
            return

        for partido in partidos:
            self.mostrar_tarjeta_partido(partido)

    def mostrar_tarjeta_partido(self, partido):
        equipos = self.datos["equipos"]
        e1 = equipos[partido["equipo1"]]
        e2 = equipos[partido["equipo2"]]

        card = tk.Frame(self.frame_partidos, bg="#262626", pady=10, padx=15)
        card.pack(pady=8, padx=25, fill="x")

        try:
            b1 = ImageTk.PhotoImage(Image.open(e1["bandera"]).resize((64, 40)))
            b2 = ImageTk.PhotoImage(Image.open(e2["bandera"]).resize((64, 40)))
        except:
            b1 = b2 = None

        lbl1 = tk.Label(card, image=b1, bg="#262626")
        lbl1.image = b1
        lbl1.grid(row=0, column=0, padx=10)
        tk.Label(card, text=e1["pais"], bg="#262626", fg="white", font=("Segoe UI", 12)).grid(row=0, column=1)

        tk.Label(card, text=partido["resultado"], bg="#262626", fg="#00bfff", font=("Segoe UI", 13, "bold")).grid(row=0, column=2, padx=30)

        tk.Label(card, text=e2["pais"], bg="#262626", fg="white", font=("Segoe UI", 12)).grid(row=0, column=3)
        lbl2 = tk.Label(card, image=b2, bg="#262626")
        lbl2.image = b2
        lbl2.grid(row=0, column=4, padx=10)

        tk.Label(card, text=f"üìÖ {partido['fecha']}  üïì {partido['hora']}", bg="#262626", fg="gray",
                 font=("Segoe UI", 10)).grid(row=1, column=0, columnspan=5, pady=5)

    # -----------------------------
    # üìä TABLA DE POSICIONES
    # -----------------------------
    def mostrar_tabla_posiciones(self):
        self.limpiar_area()

        tk.Label(self.area_principal, text="Tabla de Posiciones",
                 bg="#1b1b1b", fg="white", font=("Segoe UI", 16, "bold")).pack(pady=15)

        tabla = ttk.Treeview(self.area_principal, columns=("Equipo", "PJ", "G", "E", "P", "Pts"), show="headings")
        tabla.pack(fill="both", expand=True, padx=30, pady=10)

        for col in ("Equipo", "PJ", "G", "E", "P", "Pts"):
            tabla.heading(col, text=col)
            tabla.column(col, anchor="center", width=100)

        # Ejemplo temporal
        datos = [("Argentina", 3, 2, 1, 0, 7),
                 ("Brasil", 3, 2, 0, 1, 6),
                 ("Francia", 3, 1, 1, 1, 4)]
        for fila in datos:
            tabla.insert("", "end", values=fila)

    # -----------------------------
    # üìã INFORMES / ESTAD√çSTICAS
    # -----------------------------
    def mostrar_informes(self):
        self.limpiar_area()

        tk.Label(self.area_principal, text="Informes y Estad√≠sticas",
                 bg="#1b1b1b", fg="white", font=("Segoe UI", 16, "bold")).pack(pady=20)

        tk.Label(self.area_principal, text="Secci√≥n en desarrollo: aqu√≠ se mostrar√°n tarjetas, goles, y rendimiento de equipos.",
                 bg="#1b1b1b", fg="gray", font=("Segoe UI", 12), wraplength=600, justify="center").pack(pady=15)

    # -----------------------------
    # ‚öôÔ∏è CONFIGURACI√ìN
    # -----------------------------
    def mostrar_configuracion(self):
        self.limpiar_area()

        tk.Label(self.area_principal, text="Configuraci√≥n del Torneo",
                 bg="#1b1b1b", fg="white", font=("Segoe UI", 16, "bold")).pack(pady=20)

        tk.Label(self.area_principal, text="Aqu√≠ podr√°s ajustar opciones generales, recargar datos o cambiar vistas.",
                 bg="#1b1b1b", fg="gray", font=("Segoe UI", 12), wraplength=600, justify="center").pack(pady=15)

# ==============================
# üîπ Ejecutar
# ==============================
if __name__ == "__main__":
    root = tk.Tk()
    app = AppTorneo(root)
    root.mainloop()
